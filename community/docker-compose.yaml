services:
  caddy-proxy:
    image: docker.io/openvidu/openvidu-caddy-local:main
    platform: linux/amd64
    container_name: caddy-proxy
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - LAN_DOMAIN=${LAN_DOMAIN:-}
      - LAN_PRIVATE_IP=${LAN_PRIVATE_IP:-}
      - LAN_MODE=${LAN_MODE:-false}
      - USE_HTTPS=${USE_HTTPS:-false}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-}
      - DASHBOARD_ADMIN_USERNAME=${DASHBOARD_ADMIN_USERNAME:-}
      - DASHBOARD_ADMIN_PASSWORD=${DASHBOARD_ADMIN_PASSWORD:-}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-}
      - MEET_INITIAL_ADMIN_USER=${MEET_INITIAL_ADMIN_USER:-}
      - MEET_INITIAL_ADMIN_PASSWORD=${MEET_INITIAL_ADMIN_PASSWORD:-}
      - MEET_INITIAL_API_KEY=${MEET_INITIAL_API_KEY:-}
    volumes:
      - ./custom-layout:/var/www/custom-layout
    ports:
      - 5443:5443
      - 6443:6443
      - 7443:7443
      - 7880:7880
      - 9443:9443
    depends_on:
      setup:
        condition: service_completed_successfully

  redis:
    image: docker.io/redis:8.2.2-alpine
    platform: linux/amd64
    container_name: redis
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis:/data
    command: >
      redis-server
      --bind 0.0.0.0
      --requirepass ${REDIS_PASSWORD:-}
    depends_on:
      setup:
        condition: service_completed_successfully

  minio:
    image: docker.io/openvidu/minio:2025.9.7-debian-12-r3
    platform: linux/amd64
    container_name: minio
    restart: unless-stopped
    ports:
      - 9000:9000
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-}
      - MINIO_DEFAULT_BUCKETS=openvidu-appdata
      - MINIO_CONSOLE_SUBPATH=/minio-console
      - MINIO_BROWSER=on
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:7880/minio-console
    volumes:
      - minio-data:/bitnami/minio/data
      - minio-certs:/certs
    depends_on:
      setup:
        condition: service_completed_successfully

  mongo:
    image: docker.io/openvidu/mongodb:8.0.15-r0
    platform: linux/amd64
    container_name: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/bitnami/mongodb
    environment:
      - MONGODB_ROOT_USER=${MONGO_ADMIN_USERNAME:-}
      - MONGODB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD:-}
      - MONGODB_ADVERTISED_HOSTNAME=mongo
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_REPLICA_SET_KEY=devreplicasetkey
      - EXPERIMENTAL_DOCKER_DESKTOP_FORCE_QEMU=${EXPERIMENTAL_DOCKER_DESKTOP_FORCE_QEMU:-0}
    depends_on:
      setup:
        condition: service_completed_successfully

  dashboard:
    image: docker.io/openvidu/openvidu-dashboard:main
    platform: linux/amd64
    container_name: dashboard
    restart: unless-stopped
    environment:
      - SERVER_PORT=5000
      - ADMIN_USERNAME=${DASHBOARD_ADMIN_USERNAME:-}
      - ADMIN_PASSWORD=${DASHBOARD_ADMIN_PASSWORD:-}
      - DATABASE_URL=mongodb://${MONGO_ADMIN_USERNAME}:${MONGO_ADMIN_PASSWORD}@mongo:27017/?replicaSet=rs0&readPreference=primaryPreferred
    depends_on:
      setup:
        condition: service_completed_successfully

  openvidu:
    image: docker.io/openvidu/openvidu-server:main
    platform: linux/amd64
    restart: unless-stopped
    container_name: openvidu
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - LAN_PRIVATE_IP=${LAN_PRIVATE_IP:-}
      - LAN_MODE=${LAN_MODE:-false}
    ports:
      - 3478:3478/udp
      - 7881:7881/tcp
      - 7900-7999:7900-7999/udp
    entrypoint: /bin/sh /scripts/entrypoint.sh
    command: --config /etc/livekit.yaml
    volumes:
      - ./livekit.yaml:/etc/livekit.yaml
      - ./scripts/entrypoint_openvidu.sh:/scripts/entrypoint.sh
    depends_on:
      setup:
        condition: service_completed_successfully

  ingress:
    image: docker.io/openvidu/ingress:main
    platform: linux/amd64
    container_name: ingress
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      - 1935:1935
      - 8085:8085
      - 7895:7895/udp
    environment:
      - INGRESS_CONFIG_FILE=/etc/ingress.yaml
    volumes:
      - ./ingress.yaml:/etc/ingress.yaml
    depends_on:
      setup:
        condition: service_completed_successfully

  egress:
    image: docker.io/openvidu/egress:main
    platform: linux/amd64
    restart: unless-stopped
    container_name: egress
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - EGRESS_CONFIG_FILE=/etc/egress.yaml
    volumes:
      - ./egress.yaml:/etc/egress.yaml
      - egress-data:/home/egress/tmp
    depends_on:
      setup:
        condition: service_completed_successfully

  openvidu-meet:
    image: docker.io/openvidu/openvidu-meet:main
    platform: linux/amd64
    container_name: openvidu-meet
    restart: on-failure
    ports:
      - 9080:6080
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - USE_HTTPS=${USE_HTTPS:-false}
      - LAN_MODE=${LAN_MODE:-false}
      - LAN_DOMAIN=${LAN_DOMAIN:-}
      - LAN_PRIVATE_IP=${LAN_PRIVATE_IP:-}
      - SERVER_PORT=6080
      - MEET_LOG_LEVEL=${MEET_LOG_LEVEL:-info}
      - MEET_NAME_ID=openviduMeet-LOCAL
      - MEET_INITIAL_API_KEY=${MEET_INITIAL_API_KEY:-meet-api-key}
      - MEET_INITIAL_ADMIN_USER=${MEET_INITIAL_ADMIN_USER:-admin}
      - MEET_INITIAL_ADMIN_PASSWORD=${MEET_INITIAL_ADMIN_PASSWORD:-admin}
      - MEET_COOKIE_SECURE=false
      - MEET_INITIAL_WEBHOOK_ENABLED=true
      - MEET_INITIAL_WEBHOOK_URL=${MEET_INITIAL_WEBHOOK_URL:-http://host.docker.internal:6080/webhook}
      - LIVEKIT_URL_PRIVATE=ws://openvidu:7880/
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - MEET_S3_BUCKET=${MEET_S3_BUCKET:-openvidu-appdata}
      - MEET_S3_SUBBUCKET=${MEET_S3_SUBBUCKET:-openvidu-meet}
      - MEET_S3_SERVICE_ENDPOINT=${MEET_S3_SERVICE_ENDPOINT:-http://minio:9000}
      - MEET_S3_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MEET_S3_SECRET_KEY=${MINIO_SECRET_KEY}
      - MEET_AWS_REGION=${MEET_AWS_REGION:-us-east-1}
      - MEET_S3_WITH_PATH_STYLE_ACCESS=${MEET_S3_WITH_PATH_STYLE_ACCESS:-true}
      - MEET_REDIS_HOST=redis
      - MEET_REDIS_PORT=6379
      - MEET_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - MEET_REDIS_DB=0
    volumes:
      - ./scripts/entrypoint_openvidu_meet.sh:/scripts/entrypoint.sh
      - ./scripts/utils.sh:/scripts/utils.sh
    entrypoint: /bin/sh /scripts/entrypoint.sh
    depends_on:
      setup:
        condition: service_completed_successfully

  operator:
    image: docker.io/openvidu/openvidu-operator:main
    platform: linux/amd64
    container_name: operator
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - agents-config:/agents-config
      - ./:/deployment
    environment:
      - PLATFORM=linux/amd64
      - MODE=agent-manager-local
      - DEPLOYMENT_FILES_DIR=/deployment
      - AGENTS_CONFIG_DIR=/agents-config
      - NETWORK_NAME=openvidu-community
      - AGENTS_CONFIG_VOLUME=openvidu-agents-config
      - LIVEKIT_URL=ws://openvidu:7880/
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-}
      - REDIS_ADDRESS=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      setup:
        condition: service_completed_successfully

  ready-check:
    image: docker.io/openvidu/openvidu-operator:main
    platform: linux/amd64
    container_name: ready-check
    restart: on-failure
    environment:
      - MODE=local-ready-check
      - OPENVIDU_ENVIRONMENT=local-platform
      - USE_HTTPS=${USE_HTTPS:-false}
      - LAN_DOMAIN=${LAN_DOMAIN:-}
      - LAN_MODE=${LAN_MODE:-false}
      - LAN_PRIVATE_IP=${LAN_PRIVATE_IP:-}
      - DASHBOARD_ADMIN_USERNAME=${DASHBOARD_ADMIN_USERNAME:-}
      - DASHBOARD_ADMIN_PASSWORD=${DASHBOARD_ADMIN_PASSWORD:-}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-}
      - MEET_INITIAL_ADMIN_USER=${MEET_INITIAL_ADMIN_USER:-}
      - MEET_INITIAL_ADMIN_PASSWORD=${MEET_INITIAL_ADMIN_PASSWORD:-}
      - MEET_INITIAL_API_KEY=${MEET_INITIAL_API_KEY:-}
    depends_on:
      - openvidu
      - ingress
      - egress
      - dashboard
      - minio
      - mongo

  setup:
    image: docker.io/busybox:1.37.0
    platform: linux/amd64
    container_name: setup
    restart: "no"
    volumes:
      - minio-data:/minio
      - mongo-data:/mongo
      - egress-data:/egress
      - ./scripts/setup.sh:/scripts/setup.sh
    environment:
      - USE_HTTPS=${USE_HTTPS:-false}
      - LAN_MODE=${LAN_MODE:-false}
      - LAN_PRIVATE_IP=${LAN_PRIVATE_IP:-}
      - RUN_WITH_SCRIPT=${RUN_WITH_SCRIPT:-false}
    user: root
    command: /bin/sh /scripts/setup.sh

volumes:
  agents-config:
    name: openvidu-agents-config
  minio-certs:
    name: openvidu-minio-certs
  mongodb-config:
    name: openvidu-mongodb-config
  redis:
    name: openvidu-redis
  minio-data:
    name: openvidu-minio-data
  mongo-data:
    name: openvidu-mongo-data
  egress-data:
    name: openvidu-egress-data

networks:
  default:
    name: openvidu-community
