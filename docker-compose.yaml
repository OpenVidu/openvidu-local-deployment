services:

  caddy-proxy:
    image: docker.io/wcm65pck/openvidu-caddy-local:main
    container_name: caddy-proxy
    restart: unless-stopped
    extra_hosts:
      openvidu: 172.30.0.1
    environment:
      - LOCAL_DOMAIN=${LOCAL_DOMAIN:-?}
      - USE_TLS=${USE_TLS:-?}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-?}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-?}
      - DASHBOARD_ADMIN_USERNAME=${DASHBOARD_ADMIN_USERNAME:-?}
      - DASHBOARD_ADMIN_PASSWORD=${DASHBOARD_ADMIN_PASSWORD:-?}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-?}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-?}
      - OPENVIDU_SHIM_SECRET=${OPENVIDU_SHIM_SECRET:-?}
    ports:
      - 4443:4443
      - 9000:9000
    networks:
      - openvidu-net

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis:/data
    ports:
      - 6379:6379
    command: >
      redis-server
      --bind 0.0.0.0
      --requirepass ${REDIS_PASSWORD:-?}
    networks:
      - openvidu-net

  minio:
    image: bitnami/minio:2024.3.15-debian-12-r0
    container_name: minio
    restart: unless-stopped
    environment:
      - LOCAL_DOMAIN=${LOCAL_DOMAIN:-?}
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-?}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-?}
      - MINIO_DEFAULT_BUCKETS=openvidu
      - MINIO_CONSOLE_SUBPATH=/minio-console
    command: >
      /bin/sh -c "
      URL=https://$$LOCAL_DOMAIN:4443/minio-console/;
      if [ \"$USE_TLS\" = 'false' ]; then
        URL=$(echo $$URL | sed 's/https/http/');
      fi &&
      export MINIO_BROWSER_REDIRECT_URL=$$URL &&
      /opt/bitnami/scripts/minio/run.sh"
    volumes:
      - ./minio/data:/bitnami/minio/data
      - minio-certs:/certs
    networks:
      - openvidu-net
    depends_on:
      setup-volumes:
        condition: service_completed_successfully

  mongo:
    image: bitnami/mongodb:7.0.6-debian-12-r0
    container_name: mongo
    restart: unless-stopped
    volumes:
      - ./mongo/data:/bitnami/mongodb/
    ports:
      - 27017:27017
    environment:
      - MONGODB_ROOT_USER=${MONGO_ADMIN_USERNAME:-?}
      - MONGODB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD:-?}
    networks:
      - openvidu-net

  dashboard:
    image: docker.io/wcm65pck/openvidu-dashboard:main
    container_name: dashboard
    restart: unless-stopped
    environment:
      - SERVER_PORT=5000
      - ADMIN_USERNAME=${DASHBOARD_ADMIN_USERNAME:-?}
      - ADMIN_PASSWORD=${DASHBOARD_ADMIN_PASSWORD:-?}
      - DATABASE_URL=mongodb://mongoadmin:mongoadmin@mongo:27017
    networks:
      - openvidu-net

  openvidu:
    image: docker.io/wcm65pck/openvidu-livekit:main
    restart: unless-stopped
    container_name: openvidu
    network_mode: host
    extra_hosts:
      redis: 172.30.0.1
      mongo: 172.30.0.1
    environment:
      - LIVEKIT_INGRESS_RTMP_BASE_URL=rtmp://${LOCAL_DOMAIN:-?}:1935/rtmp
      - LIVEKIT_INGRESS_WHIP_BASE_URL=http://${LOCAL_DOMAIN:-?}:8080/whip
    command: --config /etc/livekit.yaml
    volumes:
      - ./livekit.yaml:/etc/livekit.yaml

  ingress:
    image: livekit/ingress:v1.2.0
    container_name: ingress
    restart: unless-stopped
    extra_hosts:
      openvidu: 172.30.0.1
    ports:
      - "1935:1935"
      - "8080:8080"
      - "7885:7885/udp"
    environment:
      - INGRESS_CONFIG_FILE=/etc/ingress.yaml
    volumes:
      - ./ingress.yaml:/etc/ingress.yaml
    networks:
      - openvidu-net

  egress:
    image: livekit/egress:v1.8.0
    restart: unless-stopped
    container_name: egress
    extra_hosts:
      openvidu: 172.30.0.1
    environment:
      - EGRESS_CONFIG_FILE=/etc/egress.yaml
    volumes:
      - ./egress.yaml:/etc/egress.yaml
      - ./egress/home/egress:/home/egress/
    networks:
      - openvidu-net
    depends_on:
      setup-volumes:
        condition: service_completed_successfully

  ready-check:
    image: curlimages/curl:8.6.0
    container_name: readycheck
    restart: on-failure
    extra_hosts:
      openvidu: 172.30.0.1
    environment:
      - LOCAL_DOMAIN=${LOCAL_DOMAIN:-?}
      - USE_TLS=${USE_TLS:-?}
    depends_on:
      - openvidu
      - ingress
      - egress
      - dashboard
      - minio
      - mongo
    command: >
      /bin/sh -c "
        until $(curl --silent --head --fail http://openvidu:7880 > /dev/null); do
          echo 'Waiting for OpenVidu to start...';
          sleep 1;
        done;
        until $(curl --silent --head --fail http://ingress:9091 > /dev/null); do
          echo 'Waiting for Ingress to start...';
          sleep 1;
        done;
        until $(curl --silent --head --fail http://egress:9091 > /dev/null); do
          echo 'Waiting for Ingress to start...';
          sleep 1;
        done;
        until $(curl --silent --head --fail http://dashboard:5000 > /dev/null); do
          echo 'Waiting for Dashboard to start...';
          sleep 1;
        done;
        until $(curl --silent --head --fail http://minio:9000/minio/health/live > /dev/null); do
          echo 'Waiting for Minio to start...';
          sleep 1;
        done;
        until $(curl --silent --head --fail http://minio:9001/minio-console > /dev/null); do
          echo 'Waiting for Mongo to start...';
          sleep 1;
        done;
        until $(curl --connect-timeout 10 --silent http://mongo:27017 > /dev/null); do
          echo 'Waiting for Mongo to start...';
          sleep 1;
        done;
        URL=https://$$LOCAL_DOMAIN:4443/
        if [ \"$USE_TLS\" = 'false' ]; then
          URL=$(echo $$URL | sed 's/https/http/');
        fi &&
        sleep 10;
        echo '';
        echo '';
        echo '------------------------';
        echo 'OpenVidu is ready!';
        echo \"Open $$URL in your browser\";
        echo '------------------------';
        echo '';
        echo '';
      "
    networks:
      - openvidu-net

  setup-volumes:
    image: busybox
    container_name: setup-volumes
    restart: on-failure
    volumes:
      - ./minio:/minio
      - ./mongo:/mongo
      - ./egress:/egress
    user: root
    command: >
      /bin/sh -c "
        mkdir -p /minio/data &&
        mkdir -p /mongo/data &&
        mkdir -p /mongo/data/ &&
        mkdir -p /egress/home/egress &&
        chown 1001:1001 /minio /minio/data
        chown 1001:1001 /mongo /mongo/data
        chown 1000:1000 /egress
        chown 1000:1000 /egress/home
        chown 1000:1000 /egress/home/egress
      "
    networks:
      - openvidu-net

# As openvidu needs to run in host network, we need to create a custom network
# So in this way, the same gateway IP can be used and therefore allow
# openvidu to communicate with redis and mongo through the gateway IP.
# On the other hand, caddy-proxy also needs to communicate with openvidu
# through the gateway IP
networks:
  openvidu-net:
    name: openvidu-net
    driver: bridge
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
          ip_range: 172.30.5.0/24
          gateway: 172.30.0.1

volumes:
  minio-certs:
  mongodb-config:
  redis:
